import pytest

from util import misc


def test_valid_phone_number():
    """Test phone number validation"""

    # Numbers have been generated by Copilot

    # Test valid phone numbers
    assert misc.valid_phone_number("0412345678") == True
    assert misc.valid_phone_number("0412 345 678") == True
    assert misc.valid_phone_number("0412-345-678") == True
    assert misc.valid_phone_number("0412.345.678") == True
    assert misc.valid_phone_number("+61434957453") == True
    assert misc.valid_phone_number("08 9757 7453") == True
    assert misc.valid_phone_number("9757-7453") == True
    assert misc.valid_phone_number("482918231") == True

    # Test invalid phone numbers
    assert misc.valid_phone_number("08-9757-745") == False
    assert misc.valid_phone_number("045 67") == False
    assert misc.valid_phone_number("000") == False
    assert misc.valid_phone_number("1223a") == False
    assert misc.valid_phone_number("12345678901234567890") == False
    assert misc.valid_phone_number("N/A") == False


def test_calculate_circle_emoji():
    """Test circle emoji calculation"""

    # Test limits
    assert misc.calculate_circle_emoji(0, 100) == ":circle0:"
    assert misc.calculate_circle_emoji(100, 100) == ":circle100:"

    # Test a few round numbers
    assert misc.calculate_circle_emoji(10, 100) == ":circle10:"
    assert misc.calculate_circle_emoji(50, 100) == ":circle50:"
    assert misc.calculate_circle_emoji(60, 100) == ":circle60:"

    # Test rounding down
    assert misc.calculate_circle_emoji(1, 20) == ":circle0:"
    assert misc.calculate_circle_emoji(25, 100) == ":circle20:"
    assert misc.calculate_circle_emoji(67, 100) == ":circle60:"

    # Test floats
    assert misc.calculate_circle_emoji(25.5, 100) == ":circle20:"

    # Test zero division
    with pytest.raises(ValueError):
        misc.calculate_circle_emoji(100, 0)

    # Test with totals other than 100
    assert misc.calculate_circle_emoji(25, 200) == ":circle10:"

    # Test with values that end up over 100%
    assert misc.calculate_circle_emoji(110, 100) == ":circle100:"


def test_hash_question():
    """Test question hashing"""

    # Test a normal question
    result = misc.hash_question("What is your name?")
    assert isinstance(result, str), "The result should be a string"
    assert len(result) == 32, "The result should be a 32-character string"

    # Test a question with emoji
    result = misc.hash_question("What's your üòò?")
    assert isinstance(result, str), "The result should be a string"
    assert len(result) == 32, "The result should be a 32-character string"

    # Test a question with a bunch of extra whitespace
    result = misc.hash_question("    What is your name?    ")
    assert isinstance(result, str), "The result should be a string"
    assert len(result) == 32, "The result should be a 32-character string"

    # Test whether punctuation affects the hash
    assert misc.hash_question("What is your name?") == misc.hash_question(
        "What is your name"
    ), "Punctuation should not affect the hash"

    # Test whether case affects the hash
    assert misc.hash_question("What is your name?") == misc.hash_question(
        "what is your name?"
    ), "Case should not affect the hash"

    # Test whether non-alphanumeric characters affect the hash
    assert misc.hash_question("What colour is your ü¶Ü") == misc.hash_question(
        "What colour is your üê∂"
    ), "Non-alphanumeric characters should not affect the hash"
